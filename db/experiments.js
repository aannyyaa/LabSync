import images from './images';

const experiments = [
  {
    id: 1,
    title: 'Experiment',
    description: 'Gel Electrophoresis',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
    imageUri: images[0].uri,
  },
  {
    id: 2,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 3,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 4,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 5,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 6,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 7,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 8,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 9,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 10,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 11,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 12,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 13,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 14,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 15,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 16,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 17,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 18,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 19,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 20,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 21,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 22,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 23,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 24,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
  {
    id: 25,
    title: 'Experiment',
    description: 'description',
    startDate: new Date(),
    samples: ['A', 'B', 'C'],
    results: [
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
      Math.floor(Math.random() * 1000),
    ],
    sampleHeader: 'Sample',
    resultsHeader: 'Length (bp)',
  },
];

export default experiments;
